@page "/amenity/edit/{Id:int}"
@page "/amenity/create"
@using Models
@using Business.Repository.IRepository
@inject IAmenitRepository AmenityRepository
@inject NavigationManager nav
@attribute [Authorize(Roles = Common.SD.Role_Admin)]


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="amenityDTO" OnValidSubmit="HandleAmenityUpsert">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="amenityDTO.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=> amenityDTO.Name" />
                    </div>
                    <div class="form-group">
                        <label>Timming</label>
                        <InputText @bind-Value="amenityDTO.Timming" class="form-control"></InputText>
                        <ValidationMessage For="()=> amenityDTO.Timming" />
                    </div>
                    <div class="form-group">
                        <label>icon</label>
                        <InputText @bind-Value="amenityDTO.Icon" class="form-control"></InputText>
                        <ValidationMessage For="()=> amenityDTO.Icon" />
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Amenity</button>
                        <NavLink href="amenity" class="btn btn-secondary">Back to Index</NavLink>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public int? Id { get; set; }
    private AmenityDTO amenityDTO = new AmenityDTO();
    public string Title { get; set; } = "Create";

    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            amenityDTO = await AmenityRepository.GetAmenity(Id.Value);
        }
        else
        {
            amenityDTO = new AmenityDTO();
        }
    }


    private async Task HandleAmenityUpsert()
    {
        try
        {
            if (Title == "Update")
            {
                await AmenityRepository.UpdateAmenity(amenityDTO.Id, amenityDTO);

            }
            else if (Title == "Create")
            {
                await AmenityRepository.CreateAmenity(amenityDTO);
            }

            nav.NavigateTo("amenity");

        }
        catch(Exception e)
        {
            return;
        }


    }


}
