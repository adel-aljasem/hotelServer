@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using Service.IService
@using Blazored.TextEditor
@inject IHotelRoomRepository HotelRoomRepositroy
@inject IHotelImagesRepository HotelImagesRepositroy
@inject NavigationManager Nav
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@attribute [Authorize(Roles = Common.SD.Role_Admin)]



<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3"> @Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@hotelRoomModel" OnValidSubmit="HandleHotelRoomUpSert">
                    <DataAnnotationsValidator />

                    <div class=" form-group">
                        <label>Name</label>
                        <InputText @bind-Value="hotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=> hotelRoomModel.Name" />
                    </div><div class=" form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="hotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=> hotelRoomModel.Occupancy" />

                    </div>
                    <div class=" form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="hotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=> hotelRoomModel.RegularRate" />
                    </div>
                    <div class=" form-group">
                        <label>Sq ft.</label>
                        <InputText @bind-Value="hotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class=" form-group" style="height:250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="hotelRoomModel.Details" class="form-control"></InputTextArea>*@

                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please Enter Room Details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    <div class="form-group" style="padding-top:70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    </div>
                    <div class="row">
                        @if (IsImageUploadProcessStarted)
                        {
                            <div class="col-md-12">
                                <span><i class="fa fa-spin fa-spinner"></i> Please wait... Images are uploading</span>
                            </div>
                        }
                        @if (hotelRoomModel.ImageUrls != null && hotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var roomImage in hotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="room-image" style="background:url('@roomImage') 50% 50%;">
                                        <span class="room-image-title">@serial</span>
                                    </div>
                                    <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                        Delete
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                    <div class=" form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO hotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeleteImagesNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;
    private BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();


    protected async override Task OnInitializedAsync()
    {


        if (Id != null)
        {
            //update
            Title = "Update";
            hotelRoomModel = await HotelRoomRepositroy.GetHotelRoom(Id.Value);
            if (hotelRoomModel?.HotelRoomImages != null)
            {
                hotelRoomModel.ImageUrls = hotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            hotelRoomModel = new HotelRoomDTO();
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(hotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(hotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }

    }

    private async Task HandleHotelRoomUpSert()
    {

        try
        {

            var roomDetailsByName = await HotelRoomRepositroy.IsRoomUnique(hotelRoomModel.Name, hotelRoomModel.Id);

            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room Name Already Exists");
                return;
            }

            if (hotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                hotelRoomModel.Details = await QuillHtml.GetHTML();

                var updateRoomResult = await HotelRoomRepositroy.UpdateHotelRoom(hotelRoomModel.Id, hotelRoomModel);
                if (hotelRoomModel.ImageUrls != null && hotelRoomModel.ImageUrls.Any() || DeleteImagesNames != null && DeleteImagesNames.Any())
                {
                    if (DeleteImagesNames != null && DeleteImagesNames.Any())
                    {
                        foreach (var deletedImageName in DeleteImagesNames)
                        {
                            var imageName = deletedImageName.Replace($"{Nav.BaseUri}RoomImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await HotelImagesRepositroy.DeleteHotelImageUrl(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.ToasterSuccess("Hotel room updated successfully");
            }
            else
            {
                //create
                hotelRoomModel.Details = await QuillHtml.GetHTML();
                var createResualt = await HotelRoomRepositroy.CreateHotelRoom(hotelRoomModel);
                await AddHotelRoomImage(createResualt);
                await JsRuntime.ToasterSuccess("Created successfully");


            }
        }
        catch (Exception ex)
        {

        }



        Nav.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            e.GetMultipleFiles(50);
            var images = new List<string>();
            if (e.GetMultipleFiles(50).Count > 0)
            {
                foreach (var file in e.GetMultipleFiles(50))
                {

                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);

                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToasterError("صيغة الصورة غير مدعومة");
                        return;
                    }
                }
            }

            if (images.Any())
            {
                if (hotelRoomModel.ImageUrls != null && hotelRoomModel.ImageUrls.Any())
                {
                    hotelRoomModel.ImageUrls.AddRange(images);
                }
                else
                {
                    hotelRoomModel.ImageUrls = new List<string>();
                    hotelRoomModel.ImageUrls.AddRange(images);
                }
            }
            else
            {
                await JsRuntime.ToasterError("Image Upl oading failed");
                return;

            }
            IsImageUploadProcessStarted = false;
        }

        catch (Exception ex)
        {
            await JsRuntime.ToasterError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        foreach (var imageUrl in hotelRoomModel.ImageUrls)
        {
            if (hotelRoomModel.HotelRoomImages == null || hotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {
                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImagesRepositroy.CreateHotelRoomImage(RoomImage);
            }

        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = hotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{Nav.BaseUri}RoomImages/", "");
            if (hotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeleteImagesNames ??= new List<string>();
                DeleteImagesNames.Add(imageUrl);

            }
            hotelRoomModel.ImageUrls.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {
            await JsRuntime.ToasterError(ex.Message);
        }

    }

    public void SetHTML()
    {
        if (!string.IsNullOrEmpty(hotelRoomModel.Details))
        {
            this.QuillHtml.LoadHTMLContent(hotelRoomModel.Details);
        }
        StateHasChanged();
    }
}
