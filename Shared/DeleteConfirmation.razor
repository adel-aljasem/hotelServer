<div class="modal fade" data-backdrop="static" data-keyboard="false" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog  modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>OnConfirmChange(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="()=>OnConfirmChange(false)" >
                    Cancel
                </button>

                @if (IsProcessStart)
                {
                    <button type="button" class="btn btn-danger"><i class="fa fa-spin fs-spinner"></i>Processing..</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="()=>OnConfirmChange(true)">
                        Delete
                    </button>
                }



            </div>
        </div>
    </div>
</div>
@code {

    public bool IsProcessStart { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ConfrmationChanged { get; set; }
    [Parameter]
    public bool IsParentComponentProcessing { get; set; }

    protected override void OnParametersSet()
    {
        IsProcessStart = IsParentComponentProcessing;
    }

    protected async Task OnConfirmChange(bool value)
    {
        if (value)
        {
            IsProcessStart = true;

        }

        await ConfrmationChanged.InvokeAsync(value);
    }

}
