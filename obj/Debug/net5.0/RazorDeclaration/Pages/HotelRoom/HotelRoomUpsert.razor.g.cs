// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Hotel.Pages.HotelRoom
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Hotel\Hotel\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Hotel\Hotel\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Hotel\Hotel\_Imports.razor"
using Hotel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Hotel\Hotel\_Imports.razor"
using Hotel.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Hotel\Hotel\_Imports.razor"
using Helper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
using Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
using Blazored.TextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
           [Authorize(Roles = Common.SD.Role_Admin)]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/hotel-room/create")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/hotel-room/edit/{Id:int}")]
    public partial class HotelRoomUpsert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 116 "C:\Hotel\Hotel\Pages\HotelRoom\HotelRoomUpsert.razor"
      
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO hotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeleteImagesNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;
    private BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();


    protected async override Task OnInitializedAsync()
    {


        if (Id != null)
        {
            //update
            Title = "Update";
            hotelRoomModel = await HotelRoomRepositroy.GetHotelRoom(Id.Value);
            if (hotelRoomModel?.HotelRoomImages != null)
            {
                hotelRoomModel.ImageUrls = hotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            hotelRoomModel = new HotelRoomDTO();
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(hotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(hotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }

    }

    private async Task HandleHotelRoomUpSert()
    {

        try
        {

            var roomDetailsByName = await HotelRoomRepositroy.IsRoomUnique(hotelRoomModel.Name, hotelRoomModel.Id);

            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room Name Already Exists");
                return;
            }

            if (hotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                hotelRoomModel.Details = await QuillHtml.GetHTML();

                var updateRoomResult = await HotelRoomRepositroy.UpdateHotelRoom(hotelRoomModel.Id, hotelRoomModel);
                if (hotelRoomModel.ImageUrls != null && hotelRoomModel.ImageUrls.Any() || DeleteImagesNames != null && DeleteImagesNames.Any())
                {
                    if (DeleteImagesNames != null && DeleteImagesNames.Any())
                    {
                        foreach (var deletedImageName in DeleteImagesNames)
                        {
                            var imageName = deletedImageName.Replace($"{Nav.BaseUri}RoomImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await HotelImagesRepositroy.DeleteHotelImageUrl(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.ToasterSuccess("Hotel room updated successfully");
            }
            else
            {
                //create
                hotelRoomModel.Details = await QuillHtml.GetHTML();
                var createResualt = await HotelRoomRepositroy.CreateHotelRoom(hotelRoomModel);
                await AddHotelRoomImage(createResualt);
                await JsRuntime.ToasterSuccess("Created successfully");


            }
        }
        catch (Exception ex)
        {

        }



        Nav.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            e.GetMultipleFiles(50);
            var images = new List<string>();
            if (e.GetMultipleFiles(50).Count > 0)
            {
                foreach (var file in e.GetMultipleFiles(50))
                {

                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);

                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToasterError("صيغة الصورة غير مدعومة");
                        return;
                    }
                }
            }

            if (images.Any())
            {
                if (hotelRoomModel.ImageUrls != null && hotelRoomModel.ImageUrls.Any())
                {
                    hotelRoomModel.ImageUrls.AddRange(images);
                }
                else
                {
                    hotelRoomModel.ImageUrls = new List<string>();
                    hotelRoomModel.ImageUrls.AddRange(images);
                }
            }
            else
            {
                await JsRuntime.ToasterError("Image Upl oading failed");
                return;

            }
            IsImageUploadProcessStarted = false;
        }

        catch (Exception ex)
        {
            await JsRuntime.ToasterError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        foreach (var imageUrl in hotelRoomModel.ImageUrls)
        {
            if (hotelRoomModel.HotelRoomImages == null || hotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {
                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImagesRepositroy.CreateHotelRoomImage(RoomImage);
            }

        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = hotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{Nav.BaseUri}RoomImages/", "");
            if (hotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeleteImagesNames ??= new List<string>();
                DeleteImagesNames.Add(imageUrl);

            }
            hotelRoomModel.ImageUrls.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {
            await JsRuntime.ToasterError(ex.Message);
        }

    }

    public void SetHTML()
    {
        if (!string.IsNullOrEmpty(hotelRoomModel.Details))
        {
            this.QuillHtml.LoadHTMLContent(hotelRoomModel.Details);
        }
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Nav { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHotelImagesRepository HotelImagesRepositroy { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHotelRoomRepository HotelRoomRepositroy { get; set; }
    }
}
#pragma warning restore 1591
